{
	"name": "TaxiDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TaxiDataCSV",
						"type": "DatasetReference"
					},
					"name": "ADLSStreamIn"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "SQLStreamIn"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AggregatedTaxiData",
						"type": "DatasetReference"
					},
					"name": "BlobStreamOut"
				}
			],
			"transformations": [
				{
					"name": "JoinStream"
				},
				{
					"name": "aggregatePaymentType"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ADLSStreamIn",
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          pickup_datetime as string,",
				"          payment_type as string,",
				"          fare_amount as string,",
				"          surcharge as string,",
				"          mta_tax as string,",
				"          tip_amount as string,",
				"          tolls_amount as string,",
				"          total_amount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SQLStreamIn",
				"ADLSStreamIn, SQLStreamIn join(medallion == medallion,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStream",
				"JoinStream aggregate(groupBy(payment_type),",
				"     {Average Fare} = avg(toInteger(total_amount)),",
				"          {Total Trip Distance} = sum(toInteger(trip_distance))) ~> aggregatePaymentType",
				"aggregatePaymentType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BlobStreamOut"
			]
		}
	}
}